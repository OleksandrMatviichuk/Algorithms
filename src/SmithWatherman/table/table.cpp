#include"table.h"

#include<string>
using namespace std;

Table::Table():size(20)
{
	matrix=new int*[size];
	for(int i=0;i<size;i++)
		matrix[i]=new int[size];
	int tmp[20][20]={
		    {  5, -2, -1, -2, -1, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -2, -2 },
		    { -2,  7,  0, -1, -3,  1,  0, -2,  0, -3, -2,  3, -1, -2, -2, -1, -1, -2, -1 },
		    { -1,  0,  6,  2, -2,  0,  0,  0,  1, -2, -3,  0, -2, -2, -2,  1,  0, -4, -2 },
		    { -2, -1,  2,  7, -3,  0,  2, -1,  0, -4, -3,  0, -3, -4, -1,  0, -1, -4, -2 },
		    { -1, -3, -2, -3, 12, -3, -3, -3, -3, -3, -2, -3, -2, -2, -4, -1, -1, -5, -3 },
		    { -1,  1,  0,  0, -3,  6,  2, -2,  1, -2, -2,  1,  0, -4, -1,  0, -1, -2, -1 },
		    { -1,  0,  0,  2, -3,  2,  6, -2,  0, -3, -2,  1, -2, -3,  0,  0, -1, -3, -2 },
		    {  0, -2,  0, -1, -3, -2, -2,  7, -2, -4, -3, -2, -2, -3, -2,  0, -2, -2, -3 },
		    { -2,  0,  1,  0, -3,  1,  0, -2, 10, -3, -2, -1,  0, -2, -2, -1, -2, -3,  2 },
		    { -1, -3, -2, -4, -3, -2, -3, -4, -3,  5,  2, -3,  2,  0, -2, -2, -1, -2,  0 },
		    { -1, -2, -3, -3, -2, -2, -2, -3, -2,  2,  5, -3,  2,  1, -3, -3, -1, -2,  0 },
		    { -1,  3,  0,  0, -3,  1,  1, -2, -1, -3, -3,  5, -1, -3, -1, -1, -1, -2, -1 },
		    { -1, -1, -2, -3, -2,  0, -2, -2,  0,  2,  2, -1,  6,  0, -2, -2, -1, -2,  0 },
		    { -2, -2, -2, -4, -2, -4, -3, -3, -2,  0,  1, -3,  0,  8, -3, -2, -1,  1,  3 },
		    { -1, -2, -2, -1, -4, -1,  0, -2, -2, -2, -3, -1, -2, -3,  9, -1, -1, -3, -3 },
		    {  1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -3, -1, -2, -2, -1,  4,  2, -4, -2 },
		    {  0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1,  2,  5, -3, -1 },
		    { -2, -2, -4, -4, -5, -2, -3, -2, -3, -2, -2, -2, -2,  1, -3, -4, -3, 15,  3 },
		    { -2, -1, -2, -2, -3, -1, -2, -3,  2,  0,  0, -1,  0,  3, -3, -2, -1,  3,  8 },
		    {  0, -2, -3, -3, -1, -3, -3, -3, -3,  3,  1, -2,  1,  0, -3, -1,  0, -3, -1 }};
	for(int i=0;i<size;i++)
		for(int j=0;j<size;j++)
		    matrix[i][j]=tmp[i][j];
	letters="ARNDCQEGHILKMFPSTWYV";
}
Table::~Table()
{
	if(matrix!=NULL)
	{
		for(int i=0;i<size;i++)
			delete [] matrix[i];
		delete [] matrix;
	}
}

int Table::get_distance(char a, char b)
{
	return get_distance(get_index(a),get_index(b));
}

int Table::get_index(char a)
{
	int count=0;
	for(string::iterator it=letters.begin(); it!=letters.end();it++)
	{
	if(*it==a)
		return count;
	count++;
	}
	return -1;
}

int Table::get_distance(int a, int b)
{
	if(a>=size ||a<0)
		return -6; //-6 the default value when we hot have coincidence
	if(b>=size || b<0)
		return -6;
	return matrix[a][b];
}
